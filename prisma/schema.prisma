// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id             String    @id @default(uuid())
  username       String    @unique
  password       String
  name           String
  email          String
  phoneNumber    String?
  profilePicture String?
  bookings       Booking[] @relation(name: "UserBookings")
  reviews        Review[]
}

model Host {
  id             String     @id @default(uuid())
  username       String     @unique
  password       String
  name           String
  email          String
  phoneNumber    String?
  profilePicture String?
  aboutMe        String?
  properties     Property[]
}

model Property {
  id             String    @id @default(uuid())
  title          String
  description    String
  location       String
  pricePerNight  Float
  bedroomCount   Int
  bathRoomCount  Int
  maxGuestCount  Int?
  rating         Float?
  hostId String?
hostReference Host? @relation(fields: [hostId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  bookings       Booking[]
  reviews        Review[]
  amenities      Amenity[] @relation("PropertyAmenity")
}

model Amenity {
  id         String     @id @default(uuid())
  name       String     
  properties Property[] @relation("PropertyAmenity")
}

model Booking {
  id String @id @default(uuid())
  userId String 
  propertyId String 
  checkinDate DateTime
  checkoutDate DateTime
  numberOfGuests Int 
  totalPrice Int 
  bookingStatus String 
  user User @relation(name: "UserBookings", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
   
}

model Review {
  id         String   @id @default(uuid())
  rating     Int
  comment    String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
} 